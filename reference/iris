#!/nix/store/561wgc73s0x1250hrgp7jm22hhv7yfln-bash-5.2-p15/bin/bash

# ===============================================================
# iris (0.4.1)
# Management tool for my systems/nix-config flake.
#
# Usage: iris {COMMAND:[(b|build)(e|edit)(n|new)(ls)]} {SYSTEMS:s/h} {CONFIG1} {CONFIG2} --yes --update
#
# Examples:
# 	iris b sh
# 	iris build s myconfig
# 	iris ls
# 	iris edit
# 	iris edit h phantom
# Author: Nathan Martindale
# License: MIT
# ===============================================================

set -o errexit
set -o nounset
set -o pipefail

export PATH="/nix/store/zz085nldqpbgvmh9dd39rcq1hxx42m3h-figlet-2.2.5/bin:/nix/store/bv6ym00pq762sbx6qj0w70jzq8r41jf7-nvd-0.2.0/bin:/nix/store/iw0rmgw7hx8ki7hafi0p263i7v9xglbm-lolcat-100.0.1/bin:$PATH"

function parse_params() {
  positional_args=()
  local param
  while [[ $# -gt 0 ]]; do
    param="$1"
    shift
    case $param in
      -h | --help)
        help=true
        ;;
      -S | --sync)
        sync=true
        ;;
      -u | --update)
        update=true
        ;;
      --version)
        version=true
        ;;
      -y | --yes)
        yes=true
        ;;

      *)
        positional_args+=("$param")
        ;;
    esac
  done
}

function print_help() {
  echo "Management tool for my systems/nix-config flake."
  echo -e "\nusage: iris {COMMAND:[(b|build)(e|edit)(n|new)(ls)]} {SYSTEMS:s/h} {CONFIG1} {CONFIG2} --yes --update

Examples:
	iris b sh
	iris build s myconfig
	iris ls
	iris edit
	iris edit h phantom"
  echo ""
  echo -e "  -h --help\t\tDisplay this help message."
  echo -e "  -S --sync\t\tSync the nix-config git repository. (This runs before a build step if specified)"
  echo -e "  -u --update\t\tUpdate the flake lock file. (This runs before a build step if specified)"
  echo -e "  --version\t\tPrint the script version."
  echo -e "  -y --yes\t\tAutomatically apply the (h)ome and/or (s)ystem configuration without prompting."
}

parse_params "$@"
set -- "${positional_args[@]}"

if [[ ${help-false} == true ]]; then
  print_help
  exit 0
fi

if [[ ${version-false} == true ]]; then
  echo "0.4.1"
  exit 0
fi

# ---------------------- MAIN SCRIPT CODE -----------------------

function print_header() {
  figlet -f cyberlarge IRIS | lolcat
}

function collect_and_print_info() {
  sys_config=""
  sys_hash=""
  sys_revCount=""
  sys_lastMod=""

  hm_config=""
  hm_hash=""
  hm_revCount=""
  hm_lastMod=""

  config_location=""

  if [[ -e "/nix/var/nix/profiles/system" ]]; then
    if [[ -e "/etc/iris/configname" ]]; then
      sys_config=$(cat "/etc/iris/configname")
    fi
    if [[ -e "/etc/iris/configlocation" ]]; then
      config_location=$(cat "/etc/iris/configlocation")
    fi
    if [[ -e "/etc/iris/configShortRev" ]]; then
      sys_hash=$(cat "/etc/iris/configShortRev")
    fi
    if [[ -e "/etc/iris/configRevCount" ]]; then
      sys_revCount=$(cat "/etc/iris/configRevCount")
      if [[ "${sys_revCount}" == "dirty" ]]; then
        sys_revCount=""
      fi
    fi
    if [[ -e "/etc/iris/configLastModified" ]]; then
      sys_lastMod=$(cat "/etc/iris/configLastModified")
      if [[ "${sys_lastMod}" != "dirty" ]]; then
        sys_lastMod=$(date -d "@${sys_lastMod}" +"%Y-%m-%d")
      fi
    fi

    system_generation_pointer=$(readlink "/nix/var/nix/profiles/system")
    system_generation_number=$(readlink "/nix/var/nix/profiles/system" | sed -e "s/[A-Za-z\-]*\([0-9]*\)/\1/g")
    #system_nix_store_pointer=$(readlink "/nix/var/nix/profiles/${system_generation_pointer}")
    system_generation_date=$(stat -c %y "/nix/var/nix/profiles/${system_generation_pointer}")
    system_generation_date_time=${system_generation_date:0:10}
    #echo -e "System gen: \t${system_generation_number} (${system_generation_date_time}) ${sys_config} \tv${sys_revCount}-${sys_hash} (${sys_lastMod})"
    printf "%-13s%-3s %-13s %-10s v%-12s (%s)\n" \
      "System gen:" \
      "${system_generation_number}" \
      "(${system_generation_date_time})" \
      "${sys_config}" \
      "${sys_revCount}-${sys_hash}" \
      "${sys_lastMod}"
    #echo -e "\t-> ${system_nix_store_pointer}"
  fi

  if [[ -e "/nix/var/nix/profiles/per-user/${USER}/home-manager" ]]; then
    if [[ -e "${XDG_DATA_HOME-$HOME/.local/share}/iris/configname" ]]; then
      hm_config=$(cat "${XDG_DATA_HOME-$HOME/.local/share}/iris/configname")
    fi
    if [[ -e "${XDG_DATA_HOME-$HOME/.local/share}/iris/configlocation" ]]; then
      config_location=$(cat "${XDG_DATA_HOME-$HOME/.local/share}/iris/configlocation")
    fi
    if [[ -e "${XDG_DATA_HOME-$HOME/.local/share}/iris/configShortRev" ]]; then
      hm_hash=$(cat "${XDG_DATA_HOME-$HOME/.local/share}/iris/configShortRev")
    fi
    if [[ -e "${XDG_DATA_HOME-$HOME/.local/share}/iris/configRevCount" ]]; then
      hm_revCount=$(cat "${XDG_DATA_HOME-$HOME/.local/share}/iris/configRevCount")
      if [[ "${hm_revCount}" == "dirty" ]]; then
        hm_revCount=""
      fi
    fi
    if [[ -e "${XDG_DATA_HOME-$HOME/.local/share}/iris/configLastModified" ]]; then
      hm_lastMod=$(cat "${XDG_DATA_HOME-$HOME/.local/share}/iris/configLastModified")
      if [[ "${hm_lastMod}" != "dirty" ]]; then
        hm_lastMod=$(date -d "@${hm_lastMod}" +"%Y-%m-%d")
      fi
    fi

    hm_generation_pointer=$(readlink "/nix/var/nix/profiles/per-user/${USER}/home-manager")
    hm_generation_number=$(readlink "/nix/var/nix/profiles/per-user/${USER}/home-manager" | sed -e "s/[A-Za-z\-]*\([0-9]*\)/\1/g")
    #hm_nix_store_pointer=$(readlink "/nix/var/nix/profiles/${hm_generation_pointer}")
    hm_generation_date=$(stat -c %y "/nix/var/nix/profiles/per-user/${USER}/${hm_generation_pointer}")
    hm_generation_date_time=${hm_generation_date:0:10}
    #echo -e "Home gen: \t${hm_generation_number} (${hm_generation_date_time}) ${hm_config} \tv${hm_revCount}-${hm_hash} (${hm_lastMod})"
    printf "%-13s%-3s %-13s %-10s v%-12s (%s)\n" \
      "Home gen:" \
      "${hm_generation_number}" \
      "(${hm_generation_date_time})" \
      "${hm_config}" \
      "${hm_revCount}-${hm_hash}" \
      "${hm_lastMod}"
    #echo -e "\t-> ${hm_nix_store_pointer}"
  fi
}

function ensure_config() {
  if [[ "${config_location}" == "" ]]; then
    echo "ERROR: no nix-config location data found."
    exit 1
  fi

  # clone repository if we don't find it in the correct location - this is
  # for if you cloned it somewhere else for some reason first
  if [[ ! -e "${config_location}" ]]; then
    echo "Config location was empty, cloning repository..."
    git clone https://github.com/WildfireXIII/nix-config.git "$config_location"
  fi
}

function sync_repo() {
  echo -e "\nSyncing configuration repository..."
  ensure_config
  pushd "${config_location}" &>/dev/null
  git pull
  popd &>/dev/null
}

function update_flake() {
  echo -e "\nUpdating nix flake..."
  ensure_config
  pushd "${config_location}" &>/dev/null
  nix flake update
  popd &>/dev/null
}

function build_system() {
  echo -e "\nRunning system build..."
  ensure_config
  pushd "${config_location}" &>/dev/null

  # TODO: check for if we're not on nixos (sys_config is "")

  config_file="${sys_config}"
  if [[ "$1" != "" ]]; then
    config_file="$1"
  fi
  if [[ "${config_file}" == "" ]]; then
    echo "System build was requested, but no configuration name was specified and no previous configuration was found. Please run 'iris build s [CONFIGNAME]'"
    exit 1
  fi

  nixos-rebuild build --fast --flake .\#"${config_file}"
  rm -f result-system
  mv result result-system
  nvd diff "/nix/var/nix/profiles/system" result-system

  if [[ ${yes-false} == false ]]; then
    # prompt loop
    valid_response=false
    while [[ ${valid_response} == false ]]; do
      read -r -p "Apply system result? [Y/n]" response
      case "${response}" in
        [nN][oO] | [nN])
          echo "System build not applied."
          echo "Build results are at ${config_location}/result-system, they can be manually inspected and applied by navigating to its bin/ directory and running 'switch-to-configuration switch'."
          exit 0
          ;;
        [yY][eE][sS] | [yY])
          valid_response=true
          break
          ;;
        "")
          valid_response=true
          break
          ;;
        *)
          echo "Invalid response, please enter [y]es or [n]o."
          ;;
      esac
    done
  fi

  # if we've hit this point, we're good to do the build!
  echo "Applying system result..."
  sudo nix-env --profile /nix/var/nix/profiles/system --set ./result-system
  sudo result-system/bin/switch-to-configuration switch
  popd &>/dev/null
}

function build_home() {
  echo -e "\nRunning home build..."
  ensure_config
  pushd "${config_location}" &>/dev/null

  # TODO: handle if home-manager not in use

  config_file="${hm_config}"
  if [[ "$1" != "" ]]; then
    config_file="$1"
  fi
  if [[ "${config_file}" == "" ]]; then
    echo "Home build was requested, but no configuration name was specified and no previous configuration was found. Please run 'iris build h [CONFIGNAME]'"
    exit 1
  fi

  home-manager build --flake .\#"${hm_config}"
  rm -f result-home
  mv result result-home
  nvd diff "/nix/var/nix/profiles/per-user/${USER}/home-manager" result-home

  if [[ ${yes-false} == false ]]; then
    # prompt loop
    valid_response=false
    while [[ ${valid_response} == false ]]; do
      read -r -p "Apply home build result? [Y/n]" response
      case "${response}" in
        [nN][oO] | [nN])
          echo "Home build not applied."
          echo "Build results are at ${config_location}/result-home, they can be manually inspected and applied by running 'activate' in its root directory."
          exit 0
          ;;
        [yY][eE][sS] | [yY])
          valid_response=true
          break
          ;;
        "")
          valid_response=true
          break
          ;;
        *)
          echo "Invalid response, please enter [y]es or [n]o."
          ;;
      esac
    done
  fi

  # if we've hit this point, we're good to do the build!
  echo "Applying home result..."
  nix-env --profile "/nix/var/nix/profiles/per-user/${USER}/home-manager" --set ./result-home
  result-home/activate
  popd &>/dev/null
}

function list_home_configs() {
  ensure_config
  echo -e "\nAvailable home configurations:"
  grep -P ".*\ =\ mkHome" "${config_location}/flake.nix" | sed -e "s/\s*\([A-Za-z0-9\-\_\@]*\)\ =.*/\1/g"
}

function list_system_configs() {
  ensure_config
  echo -e "\nAvailable system configurations:"
  # the -P is necessary for grep to handle the parens correctly (perl regex?)
  grep -P ".*\ =\ mk(StableSystem|System)" "${config_location}/flake.nix" | sed -e "s/\s*\([A-Za-z0-9\-\_\@]*\)\ =.*/\1/g"
}

function open_for_edit() {
  ensure_config
  pushd "${config_location}" &>/dev/null
  # NOTE: vim is not in requested runtimeInputs because we're assuming nvim
  # is on the machine - this is a potentially faulty assumption...but I want
  # to use whatever is already there.
  if [[ $# -gt 1 ]]; then
    echo -e "\nEditing $1 and $2..."
    vim -O "$1" "$2"
  else
    echo -e "\nEditing $1..."
    vim "$1"
  fi
  popd &>/dev/null
}

print_header
collect_and_print_info

#echo "${sys_config}" # yes this works

if [[ ${sync-false} == true ]]; then
  sync_repo
fi

if [[ ${update-false} == true ]]; then
  update_flake
fi

if [[ $# -gt 0 ]]; then
  cmd_word=$1

  # positional argument parsing
  if [[ $# -gt 1 ]]; then
    config_types=$2
  else
    config_types=""
  fi
  if [[ $# -gt 2 ]]; then
    config1=$3
    if [[ $# -gt 3 ]]; then
      config2=$4
    else
      config2=$3
    fi
  else
    config1=""
    config2=""
  fi

  # command word
  case "${cmd_word}" in
    b | build)
      case "${config_types}" in
        sh)
          build_system "${config1}"
          build_home "${config2}"
          ;;
        hs)
          build_system "${config2}"
          build_home "${config1}"
          ;;
        s)
          build_system "${config1}"
          ;;
        h)
          build_home "${config1}"
          ;;
        *)
          echo "Invalid config types, please specify 'h' and/or 's'"
          exit 1
          ;;
      esac
      ;;
    e | edit)
      case "${config_types}" in
        sh)
          config_path1="${config1}"
          if [[ "${config_path1}" == "" ]]; then
            config_path1="${sys_config}"
          fi
          config_path2="${config2}"
          if [[ "${config_path2}" == "" ]]; then
            config_path2="${hm_config}"
          fi
          config_path1="hosts/${config_path1}/default.nix"
          config_path2="home/${config_path2}/default.nix"

          open_for_edit "${config_path1}" "${config_path2}"
          ;;
        hs)
          config_path1="${config1}"
          if [[ "${config_path1}" == "" ]]; then
            config_path1="${hm_config}"
          fi
          config_path2="${config2}"
          if [[ "${config_path2}" == "" ]]; then
            config_path2="${sys_config}"
          fi
          config_path1="home/${config_path1}/default.nix"
          config_path2="hosts/${config_path2}/default.nix"

          open_for_edit "${config_path1}" "${config_path2}"
          ;;
        s)
          config_path1="${config1}"
          if [[ "${config_path1}" == "" ]]; then
            config_path1="${sys_config}"
          fi
          config_path1="hosts/${config_path1}/default.nix"
          open_for_edit "${config_path1}"
          ;;
        h)
          config_path1="${config1}"
          if [[ "${config_path1}" == "" ]]; then
            config_path1="${hm_config}"
          fi
          config_path1="home/${config_path1}/default.nix"
          open_for_edit "${config_path1}"
          ;;
        *)
          echo "Invalid config types, please specify 'h' and/or 's'"
          exit 1
          ;;
      esac
      ;;
    n | new)
      # TODO: give an option to copy an existing config, and use fzf/bat
      # with just the appropriate default.nix files to show them.
      ;;
    ls)
      case "${config_types}" in
        hs | sh | "")
          list_home_configs
          list_system_configs
          ;;
        h)
          list_home_configs
          ;;
        s)
          list_system_configs
          ;;
        *)
          echo "Invalid config types, please specify 'h' and/or 's'"
          exit 1
          ;;
      esac
      ;;
    *)
      echo "Invalid command, please specify [b|build]|[e|edit]|[n|new]|ls"
      exit 1
      ;;
  esac
fi
