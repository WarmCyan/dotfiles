#!/bin/bash

# ===============================================================
# engilog (0.1.1)
# Tool for keeping engineering logs - off the cuff notes, decisions, and brain context while working.
#
# Usage: engilog [-h|--help] [--version]
# Author: Nathan Martindale
# License: MIT
#
# This tool was initially generated from a nix configuration:
# https://github.com/WildfireXIII/nix-config
#
# Config name:
# Commit hash:  (v)
# Config date:
# Exported with export-dots v0.4.0
# ===============================================================

set -o errexit
set -o nounset
set -o pipefail

function parse_params() {
  positional_args=()
  local param
  while [[ $# -gt 0 ]]; do
    param="$1"
    shift
    case $param in
      -h | --help)
        help=true
        ;;
      --version)
        version=true
        ;;

      *)
        positional_args+=("$param")
        ;;
    esac
  done
}

function print_help() {
  echo "Tool for keeping engineering logs - off the cuff notes, decisions, and brain context while working."
  echo -e "\nusage: engilog [-h|--help] [--version]"
  echo ""
  echo -e "  -h --help\t\tDisplay this help message."
  echo -e "  --version\t\tPrint the script version."
}

parse_params "$@"
set -- "${positional_args[@]}"

if [[ ${help-false} == true ]]; then
  print_help
  exit 0
fi

if [[ ${version-false} == true ]]; then
  echo "0.1.1"
  exit 0
fi

# Function to initialize color variables, primarily thanks to https://github.com/ralish/bash-script-template/blob/main/template.sh
# SC2120 - color_init will work even if we don't pass args to it, so ignore this
# SC2034 - the entire point of this function is to define vars for _other_
#   functions to use, so disregard
# shellcheck disable=SC2034,SC2155,SC2120
function color_init() {
  # if a nonblank variable (nocolor) is passed in, we set the attributes to be blank.
  # Note that "The output of the $ta_none variable after each tput is redundant
  # during normal execution, but ensures the terminal output isn't mangled when
  # running with xtrace."
  readonly ta_none="$(tput sgr0 2>/dev/null || true)"

  # https://stackoverflow.com/questions/18096670/what-does-z-mean-in-bash
  if [[ -z ${1-} ]]; then
    # Text attributes
    readonly ta_bold="$(tput bold 2>/dev/null || true)"
    printf '%b' "$ta_none"
    readonly ta_uscore="$(tput smul 2>/dev/null || true)"
    printf '%b' "$ta_none"
    readonly ta_blink="$(tput blink 2>/dev/null || true)"
    printf '%b' "$ta_none"
    readonly ta_reverse="$(tput rev 2>/dev/null || true)"
    printf '%b' "$ta_none"
    readonly ta_conceal="$(tput invis 2>/dev/null || true)"
    printf '%b' "$ta_none"

    # Foreground codes
    readonly fg_black="$(tput setaf 0 2>/dev/null || true)"
    printf '%b' "$ta_none"
    readonly fg_blue="$(tput setaf 4 2>/dev/null || true)"
    printf '%b' "$ta_none"
    readonly fg_cyan="$(tput setaf 6 2>/dev/null || true)"
    printf '%b' "$ta_none"
    readonly fg_green="$(tput setaf 2 2>/dev/null || true)"
    printf '%b' "$ta_none"
    readonly fg_magenta="$(tput setaf 5 2>/dev/null || true)"
    printf '%b' "$ta_none"
    readonly fg_red="$(tput setaf 1 2>/dev/null || true)"
    printf '%b' "$ta_none"
    readonly fg_white="$(tput setaf 7 2>/dev/null || true)"
    printf '%b' "$ta_none"
    readonly fg_yellow="$(tput setaf 3 2>/dev/null || true)"
    printf '%b' "$ta_none"

    # Background codes
    readonly bg_black="$(tput setab 0 2>/dev/null || true)"
    printf '%b' "$ta_none"
    readonly bg_blue="$(tput setab 4 2>/dev/null || true)"
    printf '%b' "$ta_none"
    readonly bg_cyan="$(tput setab 6 2>/dev/null || true)"
    printf '%b' "$ta_none"
    readonly bg_green="$(tput setab 2 2>/dev/null || true)"
    printf '%b' "$ta_none"
    readonly bg_magenta="$(tput setab 5 2>/dev/null || true)"
    printf '%b' "$ta_none"
    readonly bg_red="$(tput setab 1 2>/dev/null || true)"
    printf '%b' "$ta_none"
    readonly bg_white="$(tput setab 7 2>/dev/null || true)"
    printf '%b' "$ta_none"
    readonly bg_yellow="$(tput setab 3 2>/dev/null || true)"
    printf '%b' "$ta_none"
  else
    # Text attributes
    readonly ta_bold=''
    readonly ta_uscore=''
    readonly ta_blink=''
    readonly ta_reverse=''
    readonly ta_conceal=''

    # Foreground codes
    readonly fg_black=''
    readonly fg_blue=''
    readonly fg_cyan=''
    readonly fg_green=''
    readonly fg_magenta=''
    readonly fg_red=''
    readonly fg_white=''
    readonly fg_yellow=''

    # Background codes
    readonly bg_black=''
    readonly bg_blue=''
    readonly bg_cyan=''
    readonly bg_green=''
    readonly bg_magenta=''
    readonly bg_red=''
    readonly bg_white=''
    readonly bg_yellow=''
  fi
}

# SC2119 - yes I know I'm not passing local args yet
# shellcheck disable=SC2119
color_init

# ---------------------- MAIN SCRIPT CODE -----------------------

# references array
declare -a references_single=("a" "d" "e" "f" "g" "h" "i" "j" "k" "l" "m" "o" "r" "s" "t" "u" "v" "w" "x")
declare -a references_double=("a" "b" "c" "d" "e" "f" "g" "h" "i" "j" "k" "l" "m" "n" "o" "p" "q" "r" "s" "t" "u" "v" "w" "x" "z")

declare -A references=()

# used to store what the next series of letters to refer to a name
# (vimium-like functionality from chrome/firefox plugin)
nextref=""

notes_dir="${XDG_DATA_HOME-$HOME/.local/share}/engilog"

# make sure the directory exists, and if not, ask if want to clone a repo
if [[ ! -e "${notes_dir}" ]]; then
  echo "Engilog directory does not exist, creating..."
  valid_response=false
  while [[ ${valid_response} == false ]]; do
    read -r -p "Do you want to clone an existing notes repository? (y/n)" response
    case "${response}" in
      [nN][oO] | [nN])
        echo "Continuing with local-only notes repository"
        mkdir -p "${notes_dir}"
        valid_response=true
        break
        ;;
      [yY][eE][sS] | [yY])
        read -r -p "Please enter a git repo URL:" git_url
        echo "Cloning notes repo into ${notes_dir}.."
        git clone "${git_url}" "${notes_dir}"
        valid_response=true
        break
        ;;
      *)
        echo "Invalid response, please enter [y]es or [n]o."
        ;;
    esac
  done
fi

# sync git if this is not a solely local-only repo
if [[ -e "${notes_dir}/.git" ]]; then
  echo "Syncing notes..."
  pushd "${notes_dir}" &>/dev/null
  git pull
  popd
fi

function insert_time {
  date_time_string=$(date +'%Y.%m.%d %H:%M:%S')
  echo -e "\n----- ${date_time_string} -----\n" >>"$1"
}

function edit_file {
  nvim "+ normal Go" "$1"
}

echo -e "Press 'n' to create a new notes session, or the key combo in yellow below to open a previous session"

double_needed=false
# shellcheck disable=SC2012
count=$(ls -1q "${notes_dir}" | wc -l)

if [[ "${count}" -gt ${#references_single[@]} ]]; then
  double_needed=true
fi

# iterate through each filename, print it out and store reference characters with it
pushd "${notes_dir}" &>/dev/null
index=0
subindex=0
# shellcheck disable=SC2045
for filename in $(ls -t1q); do
  # shellcheck disable=SC2059
  coloredname=$(sed -E "s/(.*)_(.*)_(.*)/$(printf "${fg_blue}${ta_bold}")\1$(printf "${ta_none}")\_\2\_\3/g" <<<"${filename}")

  nextref=""

  if [ "${double_needed}" = 'true' ]; then
    nextref="${references_single[$index]}${references_double[$subindex]}"
    if [[ "${subindex}" -ge "${#references_double[@]}" ]]; then
      subindex=0
      index=$index+1
    else
      subindex=$subindex+1
    fi
  else
    nextref="${references_single[$index]}"
    index=$index+1
  fi

  references+=(["$nextref"]="$filename")
  echo -e "${fg_yellow}${ta_bold}${nextref} ${ta_none}${coloredname}"
done
popd &>/dev/null

# get user input
read -p "Input: " -rn1 char1
if [[ "${char1}" == "n" ]]; then
  echo -e "\nCreating a new notes session"

  read -r -p "Session name: " name
  echo "${name}"

  datestring=$(date +"%Y.%m.%d")

  filename="${name}_${HOSTNAME}_${datestring}"
  echo "${filename}"
  touch "${notes_dir}/${filename}"

  insert_time "${notes_dir}/${filename}"

  edit_file "${notes_dir}/${filename}"

  # sync git stuff
  if [[ -e "${notes_dir}/.git" ]]; then
    echo "Syncing notes..."
    pushd "${notes_dir}" &>/dev/null
    git add -A
    git commit -am "Added ${filename}"
    git push
    popd
  fi
else
  reference_string="${char1}"

  if [ "${double_needed}" = 'true' ]; then
    read -rn1 char2
    reference_string="${char1}${char2}"
  fi

  filename=${references[$reference_string]}
  echo -e "\nOpening ${filename}..."
  insert_time "${notes_dir}/${filename}"
  edit_file "${notes_dir}/${filename}"

  # sync git stuff
  if [[ -e "${notes_dir}/.git" ]]; then
    echo "Syncing notes..."
    pushd "${notes_dir}" &>/dev/null
    git commit -am "Edited ${filename}"
    git push
    popd
  fi
fi
