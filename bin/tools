#!/bin/bash

# ===============================================================
# tools (0.2.1)
# Essentially a lister of my tools so I remember! And can quickly check which ones are installed
#
# Usage: tools [-c|--check TOOL] [-q|--quiet]
# Author: Nathan Martindale
# License: MIT
#
# This tool was initially generated from a nix configuration:
# https://github.com/WildfireXIII/nix-config
#
# Config name: amethyst
# Commit hash: ff6daa9 (v116)
# Config date: 2023-02-18
# Exported with export-dots v0.4.0
# ===============================================================

set -o errexit
set -o nounset
set -o pipefail

function parse_params() {
  positional_args=()
  local param
  while [[ $# -gt 0 ]]; do
    param="$1"
    shift
    case $param in
      -c | --check)
        check=$1
        shift
        ;;
      -h | --help)
        help=true
        ;;
      -q | --quiet)
        quiet=true
        ;;
      --version)
        version=true
        ;;

      *)
        positional_args+=("$param")
        ;;
    esac
  done
}

function print_help() {
  echo "Essentially a lister of my tools so I remember! And can quickly check which ones are installed"
  echo -e "\nusage: tools [-c|--check TOOL] [-q|--quiet]"
  echo ""
  echo -e "  -c --check\t\tCheck if a specified tool exists in the path. Will exit non-zero if tool not found."
  echo -e "  -h --help\t\tDisplay this help message."
  echo -e "  -q --quiet\t\tDon't print out any badges, but exit zero or non-zero if a tool found/not found."
  echo -e "  --version\t\tPrint the script version."
}

parse_params "$@"
set -- "${positional_args[@]}"

if [[ ${help-false} == true ]]; then
  print_help
  exit 0
fi

if [[ ${version-false} == true ]]; then
  echo "0.2.1"
  exit 0
fi

# Function to initialize color variables, primarily thanks to https://github.com/ralish/bash-script-template/blob/main/template.sh
# SC2120 - color_init will work even if we don't pass args to it, so ignore this
# SC2034 - the entire point of this function is to define vars for _other_
#   functions to use, so disregard
# shellcheck disable=SC2034,SC2155,SC2120
function color_init() {
  # if a nonblank variable (nocolor) is passed in, we set the attributes to be blank.
  # Note that "The output of the $ta_none variable after each tput is redundant
  # during normal execution, but ensures the terminal output isn't mangled when
  # running with xtrace."
  readonly ta_none="$(tput sgr0 2>/dev/null || true)"

  # https://stackoverflow.com/questions/18096670/what-does-z-mean-in-bash
  if [[ -z ${1-} ]]; then
    # Text attributes
    readonly ta_bold="$(tput bold 2>/dev/null || true)"
    printf '%b' "$ta_none"
    readonly ta_uscore="$(tput smul 2>/dev/null || true)"
    printf '%b' "$ta_none"
    readonly ta_blink="$(tput blink 2>/dev/null || true)"
    printf '%b' "$ta_none"
    readonly ta_reverse="$(tput rev 2>/dev/null || true)"
    printf '%b' "$ta_none"
    readonly ta_conceal="$(tput invis 2>/dev/null || true)"
    printf '%b' "$ta_none"

    # Foreground codes
    readonly fg_black="$(tput setaf 0 2>/dev/null || true)"
    printf '%b' "$ta_none"
    readonly fg_blue="$(tput setaf 4 2>/dev/null || true)"
    printf '%b' "$ta_none"
    readonly fg_cyan="$(tput setaf 6 2>/dev/null || true)"
    printf '%b' "$ta_none"
    readonly fg_green="$(tput setaf 2 2>/dev/null || true)"
    printf '%b' "$ta_none"
    readonly fg_magenta="$(tput setaf 5 2>/dev/null || true)"
    printf '%b' "$ta_none"
    readonly fg_red="$(tput setaf 1 2>/dev/null || true)"
    printf '%b' "$ta_none"
    readonly fg_white="$(tput setaf 7 2>/dev/null || true)"
    printf '%b' "$ta_none"
    readonly fg_yellow="$(tput setaf 3 2>/dev/null || true)"
    printf '%b' "$ta_none"

    # Background codes
    readonly bg_black="$(tput setab 0 2>/dev/null || true)"
    printf '%b' "$ta_none"
    readonly bg_blue="$(tput setab 4 2>/dev/null || true)"
    printf '%b' "$ta_none"
    readonly bg_cyan="$(tput setab 6 2>/dev/null || true)"
    printf '%b' "$ta_none"
    readonly bg_green="$(tput setab 2 2>/dev/null || true)"
    printf '%b' "$ta_none"
    readonly bg_magenta="$(tput setab 5 2>/dev/null || true)"
    printf '%b' "$ta_none"
    readonly bg_red="$(tput setab 1 2>/dev/null || true)"
    printf '%b' "$ta_none"
    readonly bg_white="$(tput setab 7 2>/dev/null || true)"
    printf '%b' "$ta_none"
    readonly bg_yellow="$(tput setab 3 2>/dev/null || true)"
    printf '%b' "$ta_none"
  else
    # Text attributes
    readonly ta_bold=''
    readonly ta_uscore=''
    readonly ta_blink=''
    readonly ta_reverse=''
    readonly ta_conceal=''

    # Foreground codes
    readonly fg_black=''
    readonly fg_blue=''
    readonly fg_cyan=''
    readonly fg_green=''
    readonly fg_magenta=''
    readonly fg_red=''
    readonly fg_white=''
    readonly fg_yellow=''

    # Background codes
    readonly bg_black=''
    readonly bg_blue=''
    readonly bg_cyan=''
    readonly bg_green=''
    readonly bg_magenta=''
    readonly bg_red=''
    readonly bg_white=''
    readonly bg_yellow=''
  fi
}

# SC2119 - yes I know I'm not passing local args yet
# shellcheck disable=SC2119
color_init

# ---------------------- MAIN SCRIPT CODE -----------------------

function status_badge() {
  local status="${1}"
  local message="${2}"

  if [[ ${status} == 0 ]]; then

    # exit based on status if quiet and don't print
    if [[ ${quiet-false} == true ]]; then
      exit 0
    fi

    echo "${bg_green}${fg_black}  OK  ${ta_none} ${message}"

    # if this was one specific tool we were looking for, exit now
    if [[ "${check-}" != "" ]]; then
      exit 0
    fi
  else

    # exit based on status if quiet and don't print
    if [[ ${quiet-false} == true ]]; then
      exit 1
    fi

    echo "${bg_red}${fg_black} MISS ${ta_none} ${message}"

    # if this was one specific tool we were looking for, exit now
    if [[ "${check-}" != "" ]]; then
      exit 1
    fi
  fi
}

function check_tool() {
  local tool="${1}"
  exists=$(
    command -v "${tool}" &>/dev/null
    echo "$?"
  )
  status_badge "${exists}" "${tool}"
}

if [[ "${check-}" != "" ]]; then
  check_tool "${check}"
fi

# my nix-specific tools
check_tool "iris"
check_tool "export-dots"
echo "------"
# my generalizable tools
check_tool "tools"
check_tool "add-jupyter-env"
check_tool "sri-hash"
check_tool "td-state"
echo "------"
# my desktop system specific tools
check_tool "mic-monitor"
check_tool "kbd-capslock"
